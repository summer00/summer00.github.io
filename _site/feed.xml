<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-03T17:36:41+08:00</updated><id>http://localhost:4000/</id><title type="html">Summer’s blog</title><subtitle>Hi, this is a place where i share my opinion of tech.</subtitle><entry><title type="html">JVM 基础知识</title><link href="http://localhost:4000/jvm/2018/08/03/jvm-basic.html" rel="alternate" type="text/html" title="JVM 基础知识" /><published>2018-08-03T15:37:48+08:00</published><updated>2018-08-03T15:37:48+08:00</updated><id>http://localhost:4000/jvm/2018/08/03/jvm-basic</id><content type="html" xml:base="http://localhost:4000/jvm/2018/08/03/jvm-basic.html">&lt;h1 id=&quot;内存模型&quot;&gt;内存模型&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;线程隔离的数据区：
    &lt;ul&gt;
      &lt;li&gt;程序计数器，指示当前线程所执行的字节码行号&lt;/li&gt;
      &lt;li&gt;虚拟机栈，生命周期与线程相同。描述的是Java方法执行的模型：每个方法执行是都会创建一个栈帧用来存储局部变量表，方法出口，操作数栈，动态链接等，方法开始时入栈，结束时出栈。&lt;/li&gt;
      &lt;li&gt;本地方法栈，与虚拟机栈类似，只不过执行的是Native方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;线程共享的数据区：
    &lt;ul&gt;
      &lt;li&gt;堆，存放对象实例&lt;/li&gt;
      &lt;li&gt;方法区，存储虚拟机加载的类信息，常量，静态变量，及时编译后的代码等。包含运行时常量池&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">内存模型</summary></entry></feed>